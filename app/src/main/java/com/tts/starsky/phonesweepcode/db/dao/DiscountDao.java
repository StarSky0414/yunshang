package com.tts.starsky.phonesweepcode.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.phonesweepcode.db.bean.Discount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCOUNT".
*/
public class DiscountDao extends AbstractDao<Discount, Long> {

    public static final String TABLENAME = "DISCOUNT";

    /**
     * Properties of entity Discount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DiscountId = new Property(0, Long.class, "discountId", true, "_id");
        public final static Property DiscountName = new Property(1, String.class, "discountName", false, "DISCOUNT_NAME");
        public final static Property DiscountNum = new Property(2, int.class, "discountNum", false, "DISCOUNT_NUM");
        public final static Property DiscountWay = new Property(3, int.class, "discountWay", false, "DISCOUNT_WAY");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
    }


    public DiscountDao(DaoConfig config) {
        super(config);
    }
    
    public DiscountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: discountId
                "\"DISCOUNT_NAME\" TEXT," + // 1: discountName
                "\"DISCOUNT_NUM\" INTEGER NOT NULL ," + // 2: discountNum
                "\"DISCOUNT_WAY\" INTEGER NOT NULL ," + // 3: discountWay
                "\"USER_ID\" INTEGER);"); // 4: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Discount entity) {
        stmt.clearBindings();
 
        Long discountId = entity.getDiscountId();
        if (discountId != null) {
            stmt.bindLong(1, discountId);
        }
 
        String discountName = entity.getDiscountName();
        if (discountName != null) {
            stmt.bindString(2, discountName);
        }
        stmt.bindLong(3, entity.getDiscountNum());
        stmt.bindLong(4, entity.getDiscountWay());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Discount entity) {
        stmt.clearBindings();
 
        Long discountId = entity.getDiscountId();
        if (discountId != null) {
            stmt.bindLong(1, discountId);
        }
 
        String discountName = entity.getDiscountName();
        if (discountName != null) {
            stmt.bindString(2, discountName);
        }
        stmt.bindLong(3, entity.getDiscountNum());
        stmt.bindLong(4, entity.getDiscountWay());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Discount readEntity(Cursor cursor, int offset) {
        Discount entity = new Discount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // discountId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // discountName
            cursor.getInt(offset + 2), // discountNum
            cursor.getInt(offset + 3), // discountWay
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Discount entity, int offset) {
        entity.setDiscountId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscountName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiscountNum(cursor.getInt(offset + 2));
        entity.setDiscountWay(cursor.getInt(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Discount entity, long rowId) {
        entity.setDiscountId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Discount entity) {
        if(entity != null) {
            return entity.getDiscountId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Discount entity) {
        return entity.getDiscountId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
