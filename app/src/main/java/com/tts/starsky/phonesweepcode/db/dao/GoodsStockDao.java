package com.tts.starsky.phonesweepcode.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.phonesweepcode.db.bean.GoodsStock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_STOCK".
*/
public class GoodsStockDao extends AbstractDao<GoodsStock, Long> {

    public static final String TABLENAME = "GOODS_STOCK";

    /**
     * Properties of entity GoodsStock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StockId = new Property(0, Long.class, "stockId", true, "_id");
        public final static Property GoodsId = new Property(1, String.class, "goodsId", false, "GOODS_ID");
        public final static Property IntoStockPrice = new Property(2, double.class, "intoStockPrice", false, "INTO_STOCK_PRICE");
        public final static Property IntoStockNum = new Property(3, int.class, "intoStockNum", false, "INTO_STOCK_NUM");
        public final static Property ResidueGoodsNum = new Property(4, int.class, "residueGoodsNum", false, "RESIDUE_GOODS_NUM");
    }


    public GoodsStockDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsStockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_STOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: stockId
                "\"GOODS_ID\" TEXT," + // 1: goodsId
                "\"INTO_STOCK_PRICE\" REAL NOT NULL ," + // 2: intoStockPrice
                "\"INTO_STOCK_NUM\" INTEGER NOT NULL ," + // 3: intoStockNum
                "\"RESIDUE_GOODS_NUM\" INTEGER NOT NULL );"); // 4: residueGoodsNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_STOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsStock entity) {
        stmt.clearBindings();
 
        Long stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindLong(1, stockId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(2, goodsId);
        }
        stmt.bindDouble(3, entity.getIntoStockPrice());
        stmt.bindLong(4, entity.getIntoStockNum());
        stmt.bindLong(5, entity.getResidueGoodsNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsStock entity) {
        stmt.clearBindings();
 
        Long stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindLong(1, stockId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(2, goodsId);
        }
        stmt.bindDouble(3, entity.getIntoStockPrice());
        stmt.bindLong(4, entity.getIntoStockNum());
        stmt.bindLong(5, entity.getResidueGoodsNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsStock readEntity(Cursor cursor, int offset) {
        GoodsStock entity = new GoodsStock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // stockId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsId
            cursor.getDouble(offset + 2), // intoStockPrice
            cursor.getInt(offset + 3), // intoStockNum
            cursor.getInt(offset + 4) // residueGoodsNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsStock entity, int offset) {
        entity.setStockId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntoStockPrice(cursor.getDouble(offset + 2));
        entity.setIntoStockNum(cursor.getInt(offset + 3));
        entity.setResidueGoodsNum(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsStock entity, long rowId) {
        entity.setStockId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsStock entity) {
        if(entity != null) {
            return entity.getStockId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsStock entity) {
        return entity.getStockId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
