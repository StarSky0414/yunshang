package com.tts.starsky.phonesweepcode.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.phonesweepcode.db.bean.Sales;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALES".
*/
public class SalesDao extends AbstractDao<Sales, String> {

    public static final String TABLENAME = "SALES";

    /**
     * Properties of entity Sales.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SalesId = new Property(0, String.class, "salesId", true, "SALES_ID");
        public final static Property CreateTime = new Property(1, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Profit = new Property(2, double.class, "profit", false, "PROFIT");
        public final static Property OriginalPrice = new Property(3, double.class, "originalPrice", false, "ORIGINAL_PRICE");
        public final static Property RealityPrice = new Property(4, double.class, "realityPrice", false, "REALITY_PRICE");
    }

    private DaoSession daoSession;


    public SalesDao(DaoConfig config) {
        super(config);
    }
    
    public SalesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALES\" (" + //
                "\"SALES_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: salesId
                "\"CREATE_TIME\" TEXT," + // 1: createTime
                "\"PROFIT\" REAL NOT NULL ," + // 2: profit
                "\"ORIGINAL_PRICE\" REAL NOT NULL ," + // 3: originalPrice
                "\"REALITY_PRICE\" REAL NOT NULL );"); // 4: realityPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sales entity) {
        stmt.clearBindings();
 
        String salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindString(1, salesId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
        stmt.bindDouble(3, entity.getProfit());
        stmt.bindDouble(4, entity.getOriginalPrice());
        stmt.bindDouble(5, entity.getRealityPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sales entity) {
        stmt.clearBindings();
 
        String salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindString(1, salesId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(2, createTime);
        }
        stmt.bindDouble(3, entity.getProfit());
        stmt.bindDouble(4, entity.getOriginalPrice());
        stmt.bindDouble(5, entity.getRealityPrice());
    }

    @Override
    protected final void attachEntity(Sales entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Sales readEntity(Cursor cursor, int offset) {
        Sales entity = new Sales( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // salesId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createTime
            cursor.getDouble(offset + 2), // profit
            cursor.getDouble(offset + 3), // originalPrice
            cursor.getDouble(offset + 4) // realityPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sales entity, int offset) {
        entity.setSalesId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProfit(cursor.getDouble(offset + 2));
        entity.setOriginalPrice(cursor.getDouble(offset + 3));
        entity.setRealityPrice(cursor.getDouble(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Sales entity, long rowId) {
        return entity.getSalesId();
    }
    
    @Override
    public String getKey(Sales entity) {
        if(entity != null) {
            return entity.getSalesId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sales entity) {
        return entity.getSalesId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
