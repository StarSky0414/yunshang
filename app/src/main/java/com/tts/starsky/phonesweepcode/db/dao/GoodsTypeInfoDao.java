package com.tts.starsky.phonesweepcode.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.phonesweepcode.db.bean.GoodsTypeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_TYPE_INFO".
*/
public class GoodsTypeInfoDao extends AbstractDao<GoodsTypeInfo, Long> {

    public static final String TABLENAME = "GOODS_TYPE_INFO";

    /**
     * Properties of entity GoodsTypeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type_concrete_id = new Property(0, Long.class, "type_concrete_id", true, "_id");
        public final static Property Type_father_id = new Property(1, Long.class, "type_father_id", false, "TYPE_FATHER_ID");
        public final static Property Type_concrete_name = new Property(2, String.class, "type_concrete_name", false, "TYPE_CONCRETE_NAME");
        public final static Property Type_concrete_image = new Property(3, String.class, "type_concrete_image", false, "TYPE_CONCRETE_IMAGE");
        public final static Property Rank = new Property(4, int.class, "rank", false, "RANK");
    }


    public GoodsTypeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsTypeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_TYPE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: type_concrete_id
                "\"TYPE_FATHER_ID\" INTEGER," + // 1: type_father_id
                "\"TYPE_CONCRETE_NAME\" TEXT," + // 2: type_concrete_name
                "\"TYPE_CONCRETE_IMAGE\" TEXT," + // 3: type_concrete_image
                "\"RANK\" INTEGER NOT NULL );"); // 4: rank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_TYPE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsTypeInfo entity) {
        stmt.clearBindings();
 
        Long type_concrete_id = entity.getType_concrete_id();
        if (type_concrete_id != null) {
            stmt.bindLong(1, type_concrete_id);
        }
 
        Long type_father_id = entity.getType_father_id();
        if (type_father_id != null) {
            stmt.bindLong(2, type_father_id);
        }
 
        String type_concrete_name = entity.getType_concrete_name();
        if (type_concrete_name != null) {
            stmt.bindString(3, type_concrete_name);
        }
 
        String type_concrete_image = entity.getType_concrete_image();
        if (type_concrete_image != null) {
            stmt.bindString(4, type_concrete_image);
        }
        stmt.bindLong(5, entity.getRank());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsTypeInfo entity) {
        stmt.clearBindings();
 
        Long type_concrete_id = entity.getType_concrete_id();
        if (type_concrete_id != null) {
            stmt.bindLong(1, type_concrete_id);
        }
 
        Long type_father_id = entity.getType_father_id();
        if (type_father_id != null) {
            stmt.bindLong(2, type_father_id);
        }
 
        String type_concrete_name = entity.getType_concrete_name();
        if (type_concrete_name != null) {
            stmt.bindString(3, type_concrete_name);
        }
 
        String type_concrete_image = entity.getType_concrete_image();
        if (type_concrete_image != null) {
            stmt.bindString(4, type_concrete_image);
        }
        stmt.bindLong(5, entity.getRank());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsTypeInfo readEntity(Cursor cursor, int offset) {
        GoodsTypeInfo entity = new GoodsTypeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // type_concrete_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // type_father_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type_concrete_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type_concrete_image
            cursor.getInt(offset + 4) // rank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsTypeInfo entity, int offset) {
        entity.setType_concrete_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType_father_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType_concrete_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType_concrete_image(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRank(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsTypeInfo entity, long rowId) {
        entity.setType_concrete_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsTypeInfo entity) {
        if(entity != null) {
            return entity.getType_concrete_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsTypeInfo entity) {
        return entity.getType_concrete_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
