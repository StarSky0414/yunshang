package com.tts.starsky.phonesweepcode.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.tts.starsky.phonesweepcode.db.bean.Discount;
import com.tts.starsky.phonesweepcode.db.bean.GoodsInfo;

import com.tts.starsky.phonesweepcode.db.bean.SalesToGoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALES_TO_GOODS".
*/
public class SalesToGoodsDao extends AbstractDao<SalesToGoods, Long> {

    public static final String TABLENAME = "SALES_TO_GOODS";

    /**
     * Properties of entity SalesToGoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SalesId = new Property(1, String.class, "salesId", false, "SALES_ID");
        public final static Property GoodsId = new Property(2, String.class, "goodsId", false, "GOODS_ID");
        public final static Property IntoStockPrice = new Property(3, double.class, "intoStockPrice", false, "INTO_STOCK_PRICE");
        public final static Property OriginalPrice = new Property(4, double.class, "originalPrice", false, "ORIGINAL_PRICE");
        public final static Property RealityPrice = new Property(5, double.class, "realityPrice", false, "REALITY_PRICE");
        public final static Property DiscountId = new Property(6, long.class, "discountId", false, "DISCOUNT_ID");
        public final static Property Profit = new Property(7, double.class, "profit", false, "PROFIT");
        public final static Property UserFatherId = new Property(8, Long.class, "userFatherId", false, "USER_FATHER_ID");
        public final static Property UserSonId = new Property(9, Long.class, "userSonId", false, "USER_SON_ID");
    }

    private DaoSession daoSession;

    private Query<SalesToGoods> sales_SalesToGoodsQuery;

    public SalesToGoodsDao(DaoConfig config) {
        super(config);
    }
    
    public SalesToGoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALES_TO_GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"SALES_ID\" TEXT," + // 1: salesId
                "\"GOODS_ID\" TEXT," + // 2: goodsId
                "\"INTO_STOCK_PRICE\" REAL NOT NULL ," + // 3: intoStockPrice
                "\"ORIGINAL_PRICE\" REAL NOT NULL ," + // 4: originalPrice
                "\"REALITY_PRICE\" REAL NOT NULL ," + // 5: realityPrice
                "\"DISCOUNT_ID\" INTEGER NOT NULL ," + // 6: discountId
                "\"PROFIT\" REAL NOT NULL ," + // 7: profit
                "\"USER_FATHER_ID\" INTEGER," + // 8: userFatherId
                "\"USER_SON_ID\" INTEGER);"); // 9: userSonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALES_TO_GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SalesToGoods entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindString(2, salesId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(3, goodsId);
        }
        stmt.bindDouble(4, entity.getIntoStockPrice());
        stmt.bindDouble(5, entity.getOriginalPrice());
        stmt.bindDouble(6, entity.getRealityPrice());
        stmt.bindLong(7, entity.getDiscountId());
        stmt.bindDouble(8, entity.getProfit());
 
        Long userFatherId = entity.getUserFatherId();
        if (userFatherId != null) {
            stmt.bindLong(9, userFatherId);
        }
 
        Long userSonId = entity.getUserSonId();
        if (userSonId != null) {
            stmt.bindLong(10, userSonId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SalesToGoods entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindString(2, salesId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(3, goodsId);
        }
        stmt.bindDouble(4, entity.getIntoStockPrice());
        stmt.bindDouble(5, entity.getOriginalPrice());
        stmt.bindDouble(6, entity.getRealityPrice());
        stmt.bindLong(7, entity.getDiscountId());
        stmt.bindDouble(8, entity.getProfit());
 
        Long userFatherId = entity.getUserFatherId();
        if (userFatherId != null) {
            stmt.bindLong(9, userFatherId);
        }
 
        Long userSonId = entity.getUserSonId();
        if (userSonId != null) {
            stmt.bindLong(10, userSonId);
        }
    }

    @Override
    protected final void attachEntity(SalesToGoods entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SalesToGoods readEntity(Cursor cursor, int offset) {
        SalesToGoods entity = new SalesToGoods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // salesId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsId
            cursor.getDouble(offset + 3), // intoStockPrice
            cursor.getDouble(offset + 4), // originalPrice
            cursor.getDouble(offset + 5), // realityPrice
            cursor.getLong(offset + 6), // discountId
            cursor.getDouble(offset + 7), // profit
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // userFatherId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // userSonId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SalesToGoods entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSalesId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntoStockPrice(cursor.getDouble(offset + 3));
        entity.setOriginalPrice(cursor.getDouble(offset + 4));
        entity.setRealityPrice(cursor.getDouble(offset + 5));
        entity.setDiscountId(cursor.getLong(offset + 6));
        entity.setProfit(cursor.getDouble(offset + 7));
        entity.setUserFatherId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUserSonId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SalesToGoods entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SalesToGoods entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SalesToGoods entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "salesToGoods" to-many relationship of Sales. */
    public List<SalesToGoods> _querySales_SalesToGoods(String salesId) {
        synchronized (this) {
            if (sales_SalesToGoodsQuery == null) {
                QueryBuilder<SalesToGoods> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SalesId.eq(null));
                sales_SalesToGoodsQuery = queryBuilder.build();
            }
        }
        Query<SalesToGoods> query = sales_SalesToGoodsQuery.forCurrentThread();
        query.setParameter(0, salesId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGoodsInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDiscountDao().getAllColumns());
            builder.append(" FROM SALES_TO_GOODS T");
            builder.append(" LEFT JOIN GOODS_INFO T0 ON T.\"GOODS_ID\"=T0.\"GOODS_ID\"");
            builder.append(" LEFT JOIN DISCOUNT T1 ON T.\"DISCOUNT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SalesToGoods loadCurrentDeep(Cursor cursor, boolean lock) {
        SalesToGoods entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GoodsInfo goodsInfo = loadCurrentOther(daoSession.getGoodsInfoDao(), cursor, offset);
        entity.setGoodsInfo(goodsInfo);
        offset += daoSession.getGoodsInfoDao().getAllColumns().length;

        Discount discounts = loadCurrentOther(daoSession.getDiscountDao(), cursor, offset);
         if(discounts != null) {
            entity.setDiscounts(discounts);
        }

        return entity;    
    }

    public SalesToGoods loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SalesToGoods> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SalesToGoods> list = new ArrayList<SalesToGoods>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SalesToGoods> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SalesToGoods> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
