package com.tts.starsky.phonesweepcode.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.phonesweepcode.db.bean.GoodsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_INFO".
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, String> {

    public static final String TABLENAME = "GOODS_INFO";

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsId = new Property(0, String.class, "goodsId", true, "GOODS_ID");
        public final static Property GoodsBarCode = new Property(1, String.class, "goodsBarCode", false, "GOODS_BAR_CODE");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property NowPrice = new Property(3, double.class, "nowPrice", false, "NOW_PRICE");
        public final static Property NewStockNum = new Property(4, int.class, "newStockNum", false, "NEW_STOCK_NUM");
        public final static Property TypeId = new Property(5, long.class, "typeId", false, "TYPE_ID");
        public final static Property UserId = new Property(6, Long.class, "userId", false, "USER_ID");
    }


    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_INFO\" (" + //
                "\"GOODS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: goodsId
                "\"GOODS_BAR_CODE\" TEXT," + // 1: goodsBarCode
                "\"GOODS_NAME\" TEXT," + // 2: goodsName
                "\"NOW_PRICE\" REAL NOT NULL ," + // 3: nowPrice
                "\"NEW_STOCK_NUM\" INTEGER NOT NULL ," + // 4: newStockNum
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 5: typeId
                "\"USER_ID\" INTEGER);"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String goodsBarCode = entity.getGoodsBarCode();
        if (goodsBarCode != null) {
            stmt.bindString(2, goodsBarCode);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
        stmt.bindDouble(4, entity.getNowPrice());
        stmt.bindLong(5, entity.getNewStockNum());
        stmt.bindLong(6, entity.getTypeId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(1, goodsId);
        }
 
        String goodsBarCode = entity.getGoodsBarCode();
        if (goodsBarCode != null) {
            stmt.bindString(2, goodsBarCode);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(3, goodsName);
        }
        stmt.bindDouble(4, entity.getNowPrice());
        stmt.bindLong(5, entity.getNewStockNum());
        stmt.bindLong(6, entity.getTypeId());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goodsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsBarCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsName
            cursor.getDouble(offset + 3), // nowPrice
            cursor.getInt(offset + 4), // newStockNum
            cursor.getLong(offset + 5), // typeId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setGoodsId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNowPrice(cursor.getDouble(offset + 3));
        entity.setNewStockNum(cursor.getInt(offset + 4));
        entity.setTypeId(cursor.getLong(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        return entity.getGoodsId();
    }
    
    @Override
    public String getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsInfo entity) {
        return entity.getGoodsId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
